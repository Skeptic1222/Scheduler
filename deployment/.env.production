# Hospital Scheduler - Production Environment Configuration for Windows IIS
# Copy this file to .env in your production deployment and update the values

# =============================================================================
# Database Configuration (PostgreSQL)
# =============================================================================

# Database type - set to 'postgresql' for Windows deployment
DB_TYPE=postgresql

# PostgreSQL connection settings
DB_HOST=localhost
DB_PORT=5432
DB_NAME=hospital_scheduler

# PostgreSQL Authentication
DB_USER=hospital_scheduler_user
DB_PASSWORD=your-secure-database-password-here

# SSL/TLS settings for PostgreSQL
DB_SSL=false

# =============================================================================
# Application Configuration
# =============================================================================

# Environment
NODE_ENV=production

# Server settings
PORT=5000
BASE_URL=http://localhost

# CORS configuration for your domain
CORS_ORIGIN=http://localhost

# =============================================================================
# Security Configuration
# =============================================================================

# Session secret (IMPORTANT: Change this in production!)
# Generate a secure random string: openssl rand -base64 32
SESSION_SECRET=your-secure-session-secret-change-this-in-production

# Additional security settings
ENABLE_RATE_LIMITING=true
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# Features Configuration
# =============================================================================

# WebSocket support for real-time updates
ENABLE_WEBSOCKET=true

# OAuth authentication (if needed)
ENABLE_OAUTH=false

# Audit logging
ENABLE_AUDIT_LOGGING=true

# =============================================================================
# Logging Configuration
# =============================================================================

# Log level (error, warn, info, debug)
LOG_LEVEL=info

# Log file path (relative to application root)
LOG_FILE=logs/hospital-scheduler.log

# =============================================================================
# Performance Configuration
# =============================================================================

# Database connection pool settings
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_POOL_ACQUIRE_TIMEOUT=60000
DB_POOL_IDLE_TIMEOUT=10000

# Request timeout (milliseconds)
REQUEST_TIMEOUT=30000

# =============================================================================
# Windows Service Configuration
# =============================================================================

# Windows service settings (configured via NSSM)
# Environment variables are set at service level, not via .env file

# =============================================================================
# Claude Code / AI Assistant Configuration
# =============================================================================

# Enable Claude Code integration for troubleshooting (optional)
CLAUDE_CODE_ENABLED=true
CLAUDE_CODE_LOG_LEVEL=info

# =============================================================================
# Monitoring and Health Checks
# =============================================================================

# Health check endpoint
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_PATH=/health

# Metrics collection
METRICS_ENABLED=true

# Database health check timeout
DB_HEALTH_CHECK_TIMEOUT=5000

# =============================================================================
# Backup and Maintenance
# =============================================================================

# Automatic backup configuration (if implemented)
AUTO_BACKUP_ENABLED=false
BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM
BACKUP_RETENTION_DAYS=7

# =============================================================================
# Development Helpers (remove in production)
# =============================================================================

# Enable debugging features (set to false in production)
DEBUG_MODE=false
VERBOSE_LOGGING=false

# =============================================================================
# Deployment Information
# =============================================================================

# Deployment version and build info
DEPLOYMENT_VERSION=1.0.0
BUILD_DATE=2025-01-01
DEPLOYED_BY=Claude-Code

# =============================================================================
# IMPORTANT NOTES FOR WINDOWS DEPLOYMENT
# =============================================================================
#
# 1. PostgreSQL Setup:
#    - Install PostgreSQL for Windows from https://www.postgresql.org/download/windows/
#    - Create database user and database during installation or via pgAdmin
#    - Ensure PostgreSQL service is running
#    - Run npm run db:push to create the database schema
#
# 2. IIS Configuration:
#    - Install URL Rewrite Module: https://www.iis.net/downloads/microsoft/url-rewrite
#    - Install Application Request Routing (ARR): https://www.iis.net/downloads/microsoft/application-request-routing
#    - Configure Application Pool for No Managed Code, Integrated Pipeline
#    - Enable ARR proxy at server level in IIS Manager
#
# 3. File Permissions:
#    - Give IIS_IUSRS read/execute permissions to application directory
#    - Ensure PostgreSQL service account permissions are configured
#
# 4. Firewall:
#    - Open port 5432 for PostgreSQL (if remote connections needed)
#    - Open port 80/443 for web traffic
#
# 5. Windows Services:
#    - Ensure PostgreSQL service is running
#    - Ensure World Wide Web Publishing Service is running
#
# 6. Troubleshooting:
#    - Check IIS logs at: C:\inetpub\logs\LogFiles\W3SVC1\
#    - Check Windows service logs at: C:\apps\hospital-scheduler\logs\
#    - Check PostgreSQL logs in pgAdmin or PostgreSQL log files
#
# 7. Claude Code Integration:
#    - If Claude Code is running in WSL, ensure proper file system mounting
#    - Use \\wsl$\Ubuntu\path\to\project for accessing files from Windows
#    - Consider running development commands from WSL bash
#
# =============================================================================