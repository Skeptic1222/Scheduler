<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <!--
    Hospital Scheduler IIS Configuration
    
    This web.config configures IIS for pure static hosting with reverse proxy
    to the Node.js application running as a Windows service on port 5000.
    
    Requirements:
    - IIS with URL Rewrite Module
    - Application Request Routing (ARR) Module  
    - WebSocket Support enabled
    - Node.js application running as Windows service on port 5000
    - PostgreSQL (configured via service environment variables)
  -->
  
  <system.webServer>
    <!-- Enable WebSocket support for real-time features -->
    <webSocket enabled="true" />
    
    <!-- Configure handlers - remove defaults that might interfere -->
    <handlers>
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
    </handlers>
    
    <!-- URL Rewrite rules for reverse proxy to Node.js service -->
    <rewrite>
      <rules>
        <!-- Static assets (CSS, JS, images) served directly -->
        <rule name="StaticAssets" stopProcessing="true">
          <match url="^(assets/|favicon\.ico|robots\.txt)" />
          <action type="None" />
        </rule>
        
        <!-- API routes - proxy to Node.js service -->
        <rule name="APIRoutes" stopProcessing="true">
          <match url="^api/.*" />
          <action type="Rewrite" url="http://127.0.0.1:5000/{R:0}" />
        </rule>
        
        <!-- WebSocket connections - proxy all WS traffic to Node.js service -->
        <rule name="WebSocketConnections" stopProcessing="true">
          <match url=".*" />
          <conditions>
            <add input="{HTTP_UPGRADE}" pattern="websocket" ignoreCase="true" />
          </conditions>
          <action type="Rewrite" url="http://127.0.0.1:5000/{R:0}" />
        </rule>
        
        <!-- Health check endpoint -->
        <rule name="HealthCheck" stopProcessing="true">
          <match url="^health/?$" />
          <action type="Rewrite" url="http://127.0.0.1:5000/health" />
        </rule>
        
        <!-- Static HTML, CSS, JS files served directly from webroot -->
        <rule name="StaticContent" stopProcessing="true">
          <match url=".*" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" />
          </conditions>
          <action type="None" />
        </rule>
        
        <!-- SPA fallback - all non-file requests go to index.html -->
        <rule name="SPAFallback">
          <match url=".*" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
            <add input="{REQUEST_URI}" pattern="^/api/" negate="true" />
            <add input="{REQUEST_URI}" pattern="^/health/?$" negate="true" />
          </conditions>
          <action type="Rewrite" url="/index.html" />
        </rule>
      </rules>
    </rewrite>
    
    <!-- Security headers and settings -->
    <httpProtocol>
      <customHeaders>
        <!-- Security headers for healthcare application -->
        <add name="X-Content-Type-Options" value="nosniff" />
        <add name="X-Frame-Options" value="DENY" />
        <add name="X-XSS-Protection" value="1; mode=block" />
        <add name="Referrer-Policy" value="strict-origin-when-cross-origin" />
        <add name="Strict-Transport-Security" value="max-age=31536000; includeSubDomains" />
        <add name="Content-Security-Policy" value="default-src 'self'; script-src 'self' 'unsafe-inline' https://accounts.google.com https://apis.google.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' ws: wss: https://oauth2.googleapis.com; frame-src https://accounts.google.com;" />
      </customHeaders>
    </httpProtocol>
    
    <!-- Request filtering and security -->
    <security>
      <requestFiltering>
        <!-- Hide sensitive directories and files -->
        <hiddenSegments>
          <add segment="node_modules" />
          <add segment="server" />
          <add segment="shared" />
          <add segment="database" />
          <add segment="deployment" />
          <add segment="bin" />
          <add segment="logs" />
          <add segment="tests" />
          <add segment=".env" />
          <add segment=".env.production" />
          <add segment="package.json" />
          <add segment="package-lock.json" />
          <add segment="tsconfig.json" />
          <add segment="vite.config.ts" />
          <add segment="drizzle.config.ts" />
        </hiddenSegments>
        
        <!-- File extension restrictions -->
        <fileExtensions>
          <add fileExtension=".config" allowed="false" />
          <add fileExtension=".env" allowed="false" />
          <add fileExtension=".ts" allowed="false" />
          <add fileExtension=".log" allowed="false" />
          <add fileExtension=".cjs" allowed="false" />
        </fileExtensions>
        
        <!-- Request size limits -->
        <requestLimits maxAllowedContentLength="52428800" />
      </requestFiltering>
    </security>
    
    <!-- Static content compression -->
    <urlCompression doStaticCompression="true" doDynamicCompression="true" />
    
    <!-- Default documents -->
    <defaultDocument>
      <files>
        <add value="index.html" />
      </files>
    </defaultDocument>
    
    <!-- Custom error pages -->
    <httpErrors errorMode="Custom" defaultResponseMode="ExecuteURL">
      <remove statusCode="404" />
      <error statusCode="404" responseMode="ExecuteURL" path="/index.html" />
    </httpErrors>
  </system.webServer>
</configuration>