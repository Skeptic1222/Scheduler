<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <!--
    Hospital Scheduler - IIS Configuration for Windows Deployment
    
    This web.config file configures IIS to reverse proxy to the Node.js application
    running as a Windows service on port 5000, with proper URL rewriting,
    static file handling, and security settings.
    
    Requirements:
    - IIS with URL Rewrite Module
    - Application Request Routing (ARR) Module
    - WebSocket Support enabled
    - Node.js application running as Windows service on port 5000
    - SQL Server Express (configured via service environment variables)
  -->
  
  <system.webServer>
    <!-- Enable WebSocket support -->
    <webSocket enabled="true" />
    
    <!-- Configure reverse proxy to Node.js service (preferred over iisnode) -->
    <handlers>
      <!-- Remove default handlers that might interfere -->
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
    </handlers>
    
    <!-- URL Rewrite rules for reverse proxy to Node.js service -->
    <rewrite>
      <rules>
        <!-- Static assets (CSS, JS, images) served directly -->
        <rule name="StaticAssets" stopProcessing="true">
          <match url="^(assets/|favicon\.ico|robots\.txt)" />
          <action type="None" />
        </rule>
        
        <!-- API routes - proxy to Node.js service -->
        <rule name="APIRoutes" stopProcessing="true">
          <match url="^api/.*" />
          <action type="Rewrite" url="http://localhost:5000/{R:0}" />
        </rule>
        
        <!-- WebSocket connections - proxy to Node.js service -->
        <rule name="WebSocketConnections" stopProcessing="true">
          <match url="^socket\.io/.*" />
          <action type="Rewrite" url="http://localhost:5000/{R:0}" />
        </rule>
        
        <!-- Static HTML, CSS, JS files served directly from webroot -->
        <rule name="StaticContent" stopProcessing="true">
          <match url=".*" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" />
          </conditions>
          <action type="None" />
        </rule>
        
        <!-- SPA fallback - all non-file requests go to index.html -->
        <rule name="SPAFallback">
          <match url=".*" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
            <add input="{REQUEST_URI}" pattern="^/api/" negate="true" />
            <add input="{REQUEST_URI}" pattern="^/socket\.io/" negate="true" />
          </conditions>
          <action type="Rewrite" url="index.html" />
        </rule>
      </rules>
    </rewrite>
    
    <!-- Security headers and settings -->
    <httpProtocol>
      <customHeaders>
        <!-- Security headers -->
        <add name="X-Content-Type-Options" value="nosniff" />
        <add name="X-Frame-Options" value="DENY" />
        <add name="X-XSS-Protection" value="1; mode=block" />
        <add name="Referrer-Policy" value="strict-origin-when-cross-origin" />
        <add name="Content-Security-Policy" value="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:;" />
      </customHeaders>
    </httpProtocol>
    
    <!-- Request filtering and security -->
    <security>
      <requestFiltering>
        <!-- Hide sensitive directories and files -->
        <hiddenSegments>
          <add segment="node_modules" />
          <add segment="server" />
          <add segment="shared" />
          <add segment="database" />
          <add segment="deployment" />
          <add segment="bin" />
          <add segment="logs" />
          <add segment="tests" />
          <add segment=".env" />
          <add segment=".env.production" />
          <add segment="package.json" />
          <add segment="package-lock.json" />
          <add segment="tsconfig.json" />
          <add segment="vite.config.ts" />
        </hiddenSegments>
        
        <!-- File extension restrictions -->
        <fileExtensions>
          <add fileExtension=".ts" allowed="false" />
          <add fileExtension=".tsx" allowed="false" />
          <add fileExtension=".env" allowed="false" />
          <add fileExtension=".key" allowed="false" />
          <add fileExtension=".pem" allowed="false" />
          <add fileExtension=".config" allowed="false" />
          <add fileExtension=".log" allowed="false" />
        </fileExtensions>
        
        <!-- Deny access to sensitive files and directories -->
        <denyUrlSequences>
          <add sequence=".env" />
          <add sequence=".env." />
          <add sequence="package.json" />
          <add sequence="package-lock.json" />
          <add sequence="web.config" />
          <add sequence=".key" />
          <add sequence=".pem" />
          <add sequence=".log" />
          <add sequence=".sql" />
          <add sequence=".md" />
          <add sequence="deployment/" />
          <add sequence="database/" />
        </denyUrlSequences>
        
        <!-- Block access to sensitive file extensions -->
        <fileExtensions>
          <add fileExtension=".env" allowed="false" />
          <add fileExtension=".key" allowed="false" />
          <add fileExtension=".pem" allowed="false" />
          <add fileExtension=".sql" allowed="false" />
          <add fileExtension=".md" allowed="false" />
          <add fileExtension=".config" allowed="false" />
          <add fileExtension=".log" allowed="false" />
        </fileExtensions>
        
        <!-- Request limits -->
        <requestLimits maxAllowedContentLength="10485760" /> <!-- 10MB max request size -->
      </requestFiltering>
    </security>
    
    <!-- Static content configuration -->
    <staticContent>
      <!-- Set proper MIME types -->
      <mimeMap fileExtension=".json" mimeType="application/json" />
      <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
      <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
      <mimeMap fileExtension=".map" mimeType="application/json" />
      
      <!-- Enable client-side caching for static assets -->
      <clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="7.00:00:00" />
    </staticContent>
    
    <!-- Compression for better performance -->
    <httpCompression directory="%SystemDrive%\inetpub\temp\IIS Temporary Compressed Files">
      <scheme name="gzip" dll="%Windir%\system32\inetsrv\gzip.dll" />
      <dynamicTypes>
        <add mimeType="text/*" enabled="true" />
        <add mimeType="message/*" enabled="true" />
        <add mimeType="application/javascript" enabled="true" />
        <add mimeType="application/json" enabled="true" />
        <add mimeType="*/*" enabled="false" />
      </dynamicTypes>
      <staticTypes>
        <add mimeType="text/*" enabled="true" />
        <add mimeType="message/*" enabled="true" />
        <add mimeType="application/javascript" enabled="true" />
        <add mimeType="application/json" enabled="true" />
        <add mimeType="*/*" enabled="false" />
      </staticTypes>
    </httpCompression>
    
    <!-- Default document -->
    <defaultDocument>
      <files>
        <clear />
        <add value="dist/public/index.html" />
      </files>
    </defaultDocument>
    
    <!-- Error pages -->
    <httpErrors>
      <remove statusCode="404" subStatusCode="-1" />
      <error statusCode="404" path="/dist/public/index.html" responseMode="ExecuteURL" />
    </httpErrors>
  </system.webServer>
  
  <!-- Environment variables (replaces unsafe .env file in webroot) -->
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <aspNetCore processPath="node" arguments="dist/index.js">
        <environmentVariables>
          <!-- Application Configuration -->
          <environmentVariable name="NODE_ENV" value="production" />
          <environmentVariable name="PORT" value="5000" />
          
          <!-- Database Configuration for SQL Server Express -->
          <environmentVariable name="DB_TYPE" value="sqlserver" />
          <environmentVariable name="DB_HOST" value="localhost" />
          <environmentVariable name="DB_PORT" value="1433" />
          <environmentVariable name="DB_NAME" value="HospitalScheduler" />
          <environmentVariable name="DB_WINDOWS_AUTH" value="true" />
          <environmentVariable name="DB_SSL" value="false" />
          <environmentVariable name="DB_TRUST_SERVER_CERTIFICATE" value="true" />
          
          <!-- Application Settings -->
          <environmentVariable name="BASE_URL" value="http://localhost" />
          <environmentVariable name="CORS_ORIGIN" value="http://localhost" />
          <environmentVariable name="ENABLE_WEBSOCKET" value="true" />
          
          <!-- Security (IMPORTANT: Change session secret in production!) -->
          <environmentVariable name="SESSION_SECRET" value="CHANGE-THIS-IN-PRODUCTION-USE-SECURE-RANDOM-STRING" />
          
          <!-- Performance -->
          <environmentVariable name="REQUEST_TIMEOUT" value="30000" />
          <environmentVariable name="DB_POOL_MIN" value="2" />
          <environmentVariable name="DB_POOL_MAX" value="10" />
        </environmentVariables>
      </aspNetCore>
    </system.webServer>
  </location>
</configuration>